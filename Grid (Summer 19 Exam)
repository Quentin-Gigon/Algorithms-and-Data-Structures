import java.io.*;
import java.util.LinkedList;
import java.util.Scanner;
import java.lang.Math;
import java.lang.Integer;
import java.lang.String;

class Main {
    public static void main(String[] args) {
        // Uncomment the following two lines if you want to read from a file
        In.open("public/test1.in");
        Out.compareTo("public/test1.out");
        
        int T = In.readInt();
        for (int test = 0; test < T; test += 1) {
          //
          // Read the size of the array and create a new one
          //
          int N = In.readInt();
          int[][] grid = new int[N][];      
          for (int i = 0; i < N; i += 1) {
            grid[i] = new int[N];
            for (int j = 0; j < N; j += 1) {
              grid[i][j] = In.readInt();
            }
          }
          Out.println(solveGrid(grid));
        }    
          
      
        // Uncomment the following line if you want to read from a file
        // In.close();
    }
    
    //
    // Provide the solution of the grid problem in this function. 
    // Feel free to provide additional fields and methods if 
    // necessary.
    //
    public static int solveGrid (int [][] grid) {    
        //
        // Your code goes here ...
        //
        
        //initialization
        int[][] dp = new int[grid.length][grid.length+2];
        int ans = Integer.MAX_VALUE;
        
        //base case (i.e. leftmost and right most column full of infinity)
        //first column
        for (int i = 0; i<grid.length; i++){
          dp[i][0] = Integer.MAX_VALUE;
        }
        //last column
        for (int i = 0; i<grid.length; i++){
          dp[i][dp[0].length-1] = Integer.MAX_VALUE;
        }
        //first row (not including first and last column)
        for (int i = 1; i<dp[0].length-1; i++){
          dp[0][i] = grid[0][i-1];
        }
        
        //fill remaining entries in table, selecting min predecessor
        for (int i=1;i<dp.length;i++){
          for (int j=1;j<dp[0].length-1;j++){
            dp[i][j]=grid[i][j-1] + min3(dp[i-1][j-1],dp[i-1][j],dp[i-1][j+1]);
          }
        }
        
        //shortest path is smallest value in final row of dp table
        for (int i = 1; i<dp[0].length-1; i++){
          if(dp[dp.length-1][i] < ans){
            ans=dp[dp.length-1][i];
          }
        }
        return ans;
    }
      
      
    public static int min3(int a, int b, int c) {
        return Math.min(a,  Math.min(b, c));
    }
}
