import java.io.*;
import java.util.LinkedList;
import java.util.Scanner;
import java.lang.Math;
import java.lang.Integer;
import java.lang.String;

class Main {
    public static void main(String[] args) {
        // Uncomment the following two lines if you want to read from a file
        In.open("public/test2.in");
        Out.compareTo("public/test2.out");
        
        // Read the number of test cases
        int T = In.readInt();
        //
        // Now solve each case
        //    
        for (int test = 0; test < T; test += 1) {
          //
          // Read the number of rows of the matrix
          //
          int M = In.readInt();
          //
          // Read the number of columns of the matrix
          //
          int N = In.readInt();
          //
          // Allocate the matrix
          //
          int B[][] = new int[M][N];      
          //
          // Read the matrix
          //
          for (int i = 0; i < M; i += 1) {
            for (int j = 0; j < N; j += 1) {                          
              B[i][j] = In.readInt();                     
            }
          }        
          
          Out.println(Square(M, N, B));
        }
        
      
        // Uncomment the following line if you want to read from a file
        In.close();
    }
    
    private static int Square(int M, int N, int[][] B){

      int[][] DP = new int[M+1][N+1];
      for(int i = 0; i < DP[0].length; i++){
        DP[0][i] = 0;
      }
      for(int i = 0; i < DP.length; i++) {
        DP[i][0] = 0;
      }
      int counter = 0;
      for(int i = 1; i < DP.length; i++){
        for(int j = 1; j < DP[i].length; j++) {
          if(B[i-1][j-1] == 0){
            DP[i][j] = 0;
          }else{
            DP[i][j] = Math.min(DP[i-1][j-1], Math.min(DP[i][j-1], DP[i-1][j]))+1;
            if(DP[i][j] > counter){
              counter = DP[i][j];
            }
          }
          //Out.println("Max area at ["+i+"] ["+j+"] is " + DP[i][j]);
        }
      }
      
      
      return counter * counter;
      
      
      // Please complete this method
      
      /*
      //DP Table
      int[][] dp = new int[M][N];
      int counter = 0;
      
      //Base case 1
      if (B.length==0||B[0].length==0){
        return 0;
      }
      //Base case 2
      //check top left entry, if its 1, initialize whole first column and row to 1
      if (B[0][0]==1){
        dp[0][0]=1;
        //fill first row
        for (int i=1;i<N;i++){
          dp[0][i] = 1;
        }
        //fill first column
        for (int i=1;i<M;i++){
          dp[i][0] = 1;
        }
      }
      //else start filling row and column with zeroes, until you find 1, then rest of row/column will be filled with 1
      else{
        dp[0][0]=0;
         //fill first row
        for (int i=1;i<N;i++){
          dp[0][i] = Math.max(dp[0][i-1],B[0][i]);
          if (dp[0][i]>counter){
            counter = dp[0][i];
          }
        }
        //fill first column
        for (int i=1;i<M;i++){
          dp[i][0] = Math.max(dp[i-1][0],B[i][0]);
          if (dp[i][0]>counter){
            counter = dp[i][0];
          }
        }
        
      }
      
      //Recurrence
      for (int i=1;i<M;i++){
        for(int j=1;j<N;j++){
          //case 1 : left, upper left, and above elements are all 1 in B and B[i][j] is 1
          if (B[i-1][j]== 1 && B[i-1][j-1] == 1 && B[i][j-1] == 1 && B[i][j]==1 ) {
            dp[i][j] = dp[i-counter][j-counter] + 1;
            if (dp[i][j]>counter){
              counter = dp[i][j];
            }
            
          }
          //case 2 : left, upper left, and above elements are not all 1 in B
          else {
            dp[i][j]= Math.max(dp[i-1][j],Math.max(dp[i-1][j-1],dp[i][j-1]));
            if (dp[i][j]>counter){
              counter = dp[i][j];
            }
          }
           //Out.println("Max area at ["+i+"] ["+j+"] is " + dp[i][j]);
        }
      }
      
      //return the max area, which is the bottom right entry squared
      int area = dp[M-1][N-1] * dp[M-1][N-1];
      return area;
      */
    }
  }
