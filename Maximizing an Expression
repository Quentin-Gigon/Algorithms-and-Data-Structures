class Main {
    public static void main(String[] args) {
        
        // Uncomment the following two lines if you want to read from a file
        In.open("public/custom.in");
        //Out.compareTo("public/test2.out");

        int n = In.readInt();           // Read Number of Operands
        int[] Operand=new int[n];
        for(int i=0;i<n;i++){           // Read Operands
          Operand[i]=In.readInt();
        }
        String Operator_ST=In.readString();
        char[] Operator=new char[n-1];
        for(int i=0;i<n-1;i++){         // Read Operators
          Operator[i]=Operator_ST.charAt(i);
        }
     
    
        Out.println(maximizing_an_expression(n,Operand,Operator));  
        
       
      
        // Uncomment the following line if you want to read from a file
        In.close();
    }
    
    private static int maximizing_an_expression(int n, int[] Operand, char[] Operator){
      // "Operand" stores n Operands
      // "Operator" stores n-1 Operators
      // For the expression "1+3*2", Operand={1,3,2} and Operator={+,*}
      
      
      int[][] MinTB=new int[n+1][n+1]; 
      int[][] MaxTB=new int[n+1][n+1];
      
      
      // Please complete this Method.
      
      //intialize new DP Table n+1 x n+1 and min variable
      //int[][] DP = new int[n+1][n+1];
      int max;
      int min;
      int j;
      int expressionMin;
      int expressionMax;
      
      //Base case 1: diagonal elements are themselves (i.e. dp[i][i]=ai)
      for (int i=1; i<n+1;i++){
        MinTB[i][i]= Operand[i-1];
        MaxTB[i][i]= Operand[i-1];
        //DEBUG
       // Out.println("DP["+i+"]["+i+"] is set to "+Operand[i-1]);
      }
      
      //Base case 2: diagonal where i-j = 1, max = min (because there is only 1 possible combination)
      for (int i=1; i<n;i++){
        j=i+1;
        //if operator is a *, multiply both expressions
        if (Operator[i-1] == '*'){
           MinTB[i][j] = (MinTB[i][i])*(MinTB[j][j]);
           MaxTB[i][j] = (MaxTB[i][i])*(MaxTB[j][j]);
           }
           //...else add both expressions 
           else{
           MinTB[i][j] = (MinTB[i][i])+(MinTB[j][j]);
           MaxTB[i][j] = (MaxTB[i][i])+(MaxTB[j][j]);
           }
      }
      
      //fill min table, d increases by 1 up to n+1, i increases by 1 up to n+1-d, j = i+d
      for (int d =2;d<n;d++){
        
        for (int i=1;i<n+1-d;i++){
         j=i+d;
         min = Integer.MAX_VALUE;
         max = Integer.MIN_VALUE;
         
         //calculate all possible combinations parenthesization for numbers i-j
         for(int k=i;k<j;k++){ 
           //check operator between ...[i][k] and [k+1[j]]
           //if its a +, then...
           if (Operator[k-1] == '+'){
             //...local max is sum of max
             expressionMax = MaxTB[i][k]+MaxTB[k+1][j];
             //...local min is sum of min
             expressionMin = MinTB[i][k]+MinTB[k+1][j];
           }
           
           //if its a * then...
           else{
             //...local max is max{max*max,min*min}
             expressionMax = Math.max(MaxTB[i][k]*MaxTB[k+1][j],MinTB[i][k]*MinTB[k+1][j]);
             //CONTINUE HERE
             expressionMin = Math.min(Math.min(Math.min(MaxTB[i][k]*MaxTB[k+1][j],MaxTB[i][k]*MinTB[k+1][j]), MinTB[i][k]*MaxTB[k+1][j]),MinTB[i][k]*MinTB[k+1][j]);
            }
           
           //if expressionMin is smallest value so far, set min = expression 
           if (expressionMin<min){
             min = expressionMin; 
            } 
            //Update min table with min
            MinTB[i][j]=min;
            //DEBUG
            //Out.println("MinTB["+i+"]["+j+"] is set to "+min);
            
           //if expressionMax is largest value so far, set max = expression 
           if (expressionMax>max){
             max = expressionMax; 
            } 
            //Update max table with max
            MaxTB[i][j]=max;
            //DEBUG
            //Out.println("MaxTB["+i+"]["+j+"] is set to "+max);
          } 
        }
      }
     return MaxTB[1][n];
    }
  }
